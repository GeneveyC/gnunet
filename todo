This is just the current plan, plans change.

- make GUIs handle namespace advertisement events
  => enable publishing of namespace ads in FSUI
  => test
- Publishing:
  * clean up indexing with gnunet-insert (#1107)
  * power insert (#854)
  * insert meta-data under hash (md5? sha1? sha-512? GNUnet-URI?)
    as keyword (to allow getting meta-data from URI only)
- Correctness: 
  * kv_sqlitetest has MAJOR valgrind failures!
  * kvstore_mysql is not implemented!
  *  dstore_postgres is not implemented
  * kvstore_postgres is not implemented
  * new MySQL code sometimes causes gnunetd to "hang" 
    (consumes 100% CPU, call to mysqld never returns, mysqld goes crazy,
     gnunetd eventually disconnects from the network, badness...)
  * clean up and test VPN code
  * test RPC code (write a small demo)
  * valgrind violation:
	==23522== Thread 11:
	==23522== Invalid read of size 1
	==23522==    at 0x42BACE7: GNUNET_bloomfilter_or (bloomfilter.c:666)
	==23522==    by 0x7821E4E: GNUNET_FS_GAP_execute_query (gap.c:312)
	==23522==    by 0x781BD5A: handle_p2p_query (fs.c:687)
	==23522==    by 0x40450AC: GNUNET_CORE_p2p_inject_message (handler.c:505)
	==23522==    by 0x40459BB: handleMessage (handler.c:620)
	==23522==    by 0x4045C4C: threadMain (handler.c:654)
	==23522==    by 0x4155F3A: start_thread (pthread_create.c:297)
	==23522==    by 0x4232B6D: clone (in /usr/lib/debug/libc-2.7.so)
	==23522==  Address 0x7c8ee80 is not stack'd, malloc'd or (recently) free'd
- Ease of use:
  * improve gnunet-setup (more auto-detection in wizards, more testing)
  * external IP detector webpage
- Performance:
  * tune DHT
  * tune GAP query planning code
- Build-in primitives:
  * OR service
  * testbed using remote testing topology setup
  * SMTP logger 
- Transports:
  * direct WiFi transport
  * HTTPS support (#1225)
  * support NAT-PMP (in addition to UPnP)
- P2P chat
- transport selection (given multiple choices,
  how should GNUnet pick a transport?)




FreeServices (random notes)
- onion routing
  * application service
  * unreliable connection through GNUnet core
  * initiator chooses path, other ORs suggest some (!) ORs for next hop
    (choose path often according to suggestions, but route randomly
     sometimes)
  * accounting 
    + each predecessor ist reposible (accountable) for its predecessor
      and has to reject connections from untrusted nodes because
      misbehaving nodes harm own trust
    + tell predecessor about MIN(own limits, successor's limits)
  * onion routing based transport
    + use introduction point instead of IP in HELLO
      => integrate NATed hosts
- subnet advertising (DHT, chat, GAP, ...)
  + applications register subnets, core advertises subnets
- anonymous DHT
  + create OR tunnel to ADHT node that performs DHT operation
  + check success of DHT operation through another tunnel
  + => OR and FreeService advertisements
